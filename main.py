import os
import time
import logging
import schedule
import instaloader
import threading
import http.server
import socketserver
from datetime import datetime, time as dt_time
import json

from telegram import Bot
from telegram.error import TelegramError

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger(__name__)

# === Keep-alive —Å–µ—Ä–≤–µ—Ä ===
def keep_alive():
    PORT = 8080
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        logger.info(f"üåê Keep-alive —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        httpd.serve_forever()

threading.Thread(target=keep_alive, daemon=True).start()

# === –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
INSTAGRAM_TARGET = os.getenv("INSTAGRAM_TARGET_USERNAME")
INSTAGRAM_USERNAME = os.getenv("INSTAGRAM_USERNAME")
INSTAGRAM_PASSWORD = os.getenv("INSTAGRAM_PASSWORD")
INSTAGRAM_SESSIONID = os.getenv("INSTAGRAM_SESSIONID")

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
bot = Bot(token=TELEGRAM_TOKEN)

# === –ö–µ—à –ø–æ—Å—Ç—ñ–≤ ===
POSTS_CACHE_FILE = "posts_cache.json"
CURRENT_INDEX_FILE = "current_index.txt"
LAST_CHECK_FILE = "last_check.txt"

def save_posts_cache(posts_data):
    with open(POSTS_CACHE_FILE, 'w') as f:
        json.dump([post.shortcode for post in posts_data], f)

def load_posts_cache():
    if os.path.exists(POSTS_CACHE_FILE):
        with open(POSTS_CACHE_FILE, 'r') as f:
            return json.load(f)
    return None

def save_current_index(index):
    with open(CURRENT_INDEX_FILE, 'w') as f:
        f.write(str(index))

def load_current_index():
    if os.path.exists(CURRENT_INDEX_FILE):
        with open(CURRENT_INDEX_FILE, 'r') as f:
            return int(f.read().strip())
    return 0

def save_last_check():
    with open(LAST_CHECK_FILE, 'w') as f:
        f.write(datetime.now().isoformat())

def load_last_check():
    if os.path.exists(LAST_CHECK_FILE):
        with open(LAST_CHECK_FILE, 'r') as f:
            return datetime.fromisoformat(f.read().strip())
    return None

# === Instagram –∫–ª—ñ—î–Ω—Ç ===
def get_instagram_client():
    L = instaloader.Instaloader(
        sleep=True,
        quiet=True,
        user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    )
    
    if INSTAGRAM_SESSIONID:
        try:
            L.context._session.cookies.set("sessionid", INSTAGRAM_SESSIONID, domain=".instagram.com")
            L.test_login()
            logger.info("üîë –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ sessionid")
            return L
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ sessionid: {e}")
    
    if INSTAGRAM_USERNAME and INSTAGRAM_PASSWORD:
        try:
            L.login(INSTAGRAM_USERNAME, INSTAGRAM_PASSWORD)
            logger.info("üîë –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ –ª–æ–≥—ñ–Ω/–ø–∞—Ä–æ–ª—å")
            return L
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É –≤ Instagram: {e}")
            raise
    
    logger.warning("‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ Instagram. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –¥–æ—Å—Ç—É–ø.")
    return L

def get_recent_posts(count=17):
    """–û—Ç—Ä–∏–º—É—î –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤"""
    try:
        L = get_instagram_client()
        profile = instaloader.Profile.from_username(L.context, INSTAGRAM_TARGET)
        
        posts = []
        for post in profile.get_posts():
            posts.append(post)
            if len(posts) >= count + 5:  # –ë–µ—Ä–µ–º–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
                break
        
        # –í—ñ–¥—Å–æ—Ä—Ç–æ–≤—É—î–º–æ –≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ
        posts = posts[::-1]
        
        logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç—ñ–≤")
        return posts
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤: {e}")
        return None

def send_post(post):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–¥–∏–Ω –ø–æ—Å—Ç –≤ Telegram"""
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–¥—ñ–∞
        post_dir = f"temp_{post.shortcode}"
        os.makedirs(post_dir, exist_ok=True)
        L = get_instagram_client()
        L.download_post(post, target=post_dir)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–µ–¥—ñ–∞—Ñ–∞–π–ª
        media_file = None
        for file in os.listdir(post_dir):
            if file.endswith(('.jpg', '.jpeg', '.png', '.mp4')):
                media_file = os.path.join(post_dir, file)
                break
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram
        caption = f"üì∏ –ü–æ—Å—Ç –≤—ñ–¥ @{INSTAGRAM_TARGET}\n\n{post.caption or ''}"
        
        if media_file:
            with open(media_file, 'rb') as media:
                if media_file.endswith(('.mp4', '.mov')):
                    bot.send_video(chat_id=CHAT_ID, video=media, caption=caption)
                else:
                    bot.send_photo(chat_id=CHAT_ID, photo=media, caption=caption)
            logger.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç: {post.shortcode}")
        else:
            post_url = f"https://instagram.com/p/{post.shortcode}"
            bot.send_message(chat_id=CHAT_ID, text=f"{caption}\n\n{post_url}")
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–¥—ñ–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        for file in os.listdir(post_dir):
            os.remove(os.path.join(post_dir, file))
        os.rmdir(post_dir)
        
        return True
    
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: {e}")
        return False

def check_for_new_posts():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ —ñ –æ–Ω–æ–≤–ª—é—î –∫–µ—à –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ"""
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏...")
    current_posts = load_posts_cache()
    new_posts = get_recent_posts(17)
    
    if not new_posts:
        return False
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ –∞–±–æ –∑–Ω–∞–π—à–ª–∏ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏
    if not current_posts or new_posts[0].shortcode not in current_posts:
        save_posts_cache(new_posts)
        save_current_index(0)
        save_last_check()
        logger.info("üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
        return True
    
    save_last_check()
    return False

def scheduled_posting():
    """–í–∏–∫–æ–Ω—É—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    posts = load_posts_cache()
    if not posts:
        logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤—ñ...")
        if not check_for_new_posts():
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å—Ç–∏")
            return
    
    posts = load_posts_cache()
    current_index = load_current_index()
    
    if current_index >= len(posts):
        logger.info("üèÅ –í—Å—ñ –ø–æ—Å—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É—é –Ω–æ–≤—ñ...")
        if check_for_new_posts():
            # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É
            current_index = 0
            save_current_index(0)
        else:
            return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤
    actual_posts = get_recent_posts(17)
    if not actual_posts:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ—Å—Ç–∏")
        return
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Å—Ç —É –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö
    current_shortcode = posts[current_index]
    post_to_send = None
    
    for post in actual_posts:
        if post.shortcode == current_shortcode:
            post_to_send = post
            break
    
    if post_to_send:
        if send_post(post_to_send):
            save_current_index(current_index + 1)
    else:
        logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {current_shortcode} –±—ñ–ª—å—à–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é...")
        save_current_index(current_index + 1)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
schedule.every().day.at("09:00").do(scheduled_posting)
schedule.every().day.at("15:00").do(scheduled_posting)
schedule.every().day.at("21:00").do(scheduled_posting)

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å
schedule.every().day.at("08:00").do(check_for_new_posts)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    # –ü–µ—Ä—à–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤
    if not load_posts_cache():
        logger.info("üîç –ü–µ—Ä–≤–∏–Ω–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤...")
        check_for_new_posts()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    posts = load_posts_cache()
    current_index = load_current_index()
    logger.info(f"üìå –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {current_index}/{len(posts) if posts else 0} –ø–æ—Å—Ç—ñ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
    while True:
        try:
            schedule.run_pending()
            time.sleep(10)
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
            break
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
            time.sleep(60)
